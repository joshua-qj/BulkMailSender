@page "/Account/Manage/ChangePassword"


@inject IFindUserByEmailUseCase FindUserByEmailUseCase
@inject ICheckUserHasPasswordUseCase CheckIfUserHasPasswordUseCase
@inject IChangePasswordUseCase ChangePasswordUseCase
@inject IdentityRedirectManager RedirectManager

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@message" />
<div class="col-md-10">
    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
            <label for="old-password" class="form-label">Old password</label>
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
            <label for="new-password" class="form-label">New password</label>
            <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
            <label for="confirm-password" class="form-label">Confirm password</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
    </EditForm>
</div>


@code {
    private string? message;
    private UserDto? user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var userName = HttpContext.User.Identity?.Name;
        if (!string.IsNullOrEmpty(userName))
            user = await FindUserByEmailUseCase.ExecuteAsync(userName);
        if (user is null)
        {
            message = "Your account is not found. Please contact support.";
            return;
        }
        if (user.IsActive == false)
        {
            message = "Your account is inactive. Please contact support.";
            return;
        }
        hasPassword = await CheckIfUserHasPasswordUseCase.ExecuteAsync(user.Id);
        //users who register via social login or admin-created accounts.
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     base.OnAfterRender(firstRender);    
    //     hasPassword = await CheckIfUserHasPasswordUseCase.ExecuteAsync(user.Id);
    //     //users who register via social login or admin-created accounts.
    //     if (!hasPassword)
    //     {
    //         RedirectManager.RedirectTo("Account/Manage/SetPassword");
    //     }
    // }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await ChangePasswordUseCase.ExecuteAsync(user.Id, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.IsSuccess)
        {
            message = "An unexptected error occured while changing password";
            return;
        }

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

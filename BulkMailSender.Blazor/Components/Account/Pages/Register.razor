@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject IRegisterUserUseCase RegisterUserUserCase
@* @inject IUserStore<ApplicationUser> UserStore *@
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<PageTitle>Register</PageTitle>

<h1 class="center-content">Register</h1>

<div class="row">
    <div class="col-md-12">
        <!-- Status message for general information -->
        <StatusMessage Message="@Message" />

        <!-- Error message alert for failed registration -->
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-danger mt-3">
                @message
            </div>
        }
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private string? _redirectUri;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => message;

    public async Task RegisterUser(EditContext editContext)
    {
        var baseUri = NavigationManager.BaseUri;
        var result = await RegisterUserUserCase.ExecuteAsync(Input.Email, Input.Password, Input.ConfirmPassword, baseUri);

        if (result.IsSuccess)
        {
        var queryString = new Dictionary<string, object?>
                {
                    ["Email"] = Input.Email
                };
            var confirmationUrl = NavigationManager.GetUriWithQueryParameters("/Account/RegisterConfirmation", queryString);
            RedirectManager.RedirectTo(confirmationUrl);
    }else
        {
            message = result.Errors[0];
        }

        StateHasChanged();    
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

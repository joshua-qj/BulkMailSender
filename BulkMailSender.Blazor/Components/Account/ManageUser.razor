
@page "/UserAccount/ManageUser/{userid}"
@using System.ComponentModel.DataAnnotations

@* @attribute [Authorize(Policy = "Admin")] *@
@inject IGetUserWithClaimsUseCase GetUserWithClaimsUseCase
@inject IUpdateUserClaimsUseCase UpdateUserClaimsUseCase
@inject NavigationManager NavigationManager
@inject IToggleUserStatusUseCase ToggleUserStatusUseCase

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header no-spacing">
            <h3 class="center-content no">Manage User</h3>
        </div>
        <div class="card-body">
            @if (viewModel != null)
            {
                <EditForm Model="viewModel" OnValidSubmit="SaveUser" class="needs-validation" FormName="managerUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input id="email" type="text" class="form-control" readonly value="@viewModel.Email" />
                    </div>

                    <div class="mb-3">
                        <label for="permissions" class="form-label">Permissions</label>
                        <fieldset class="border rounded p-3">
                            @foreach (var permission in allPermissions)
                            {
                                <div class="form-check form-switch">
                                    <input type="checkbox" id="@permission" value="@permission" class="form-check-input"
                                           checked="@viewModel.SelectedPermissions.Contains(permission)"
                                           @onchange="(e) => TogglePermission(permission, ((ChangeEventArgs)e).Value as bool? ?? false)" />
                                    <label for="@permission" class="form-check-label form-switch-label">@permission</label>
                                </div>
                            }
                        </fieldset>
                    </div>

                    <div class="mb-3 form-check form-switch">
                        <input type="checkbox" id="deactivateUserCheckbox" class="form-check-input" @bind="@viewModel.IsDeleted" />
                        <label for="deactivateUserCheckbox" class="form-check-label form-switch-label">Set User Inactive</label>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary me-2">Save</button>
                        <a href="/account/manageusers" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string? UserId { get; set; }
    private string? message;
    private ManageUserViewModel? viewModel;
    private bool userActiveStatus;
    private List<string> allPermissions = new() { "Admin", "CanAccessEmailSending" };
    protected override async Task OnParametersSetAsync()
    {
        if (UserId != null && viewModel == null)
        {
            var (user, userClaims) = await GetUserWithClaimsUseCase.ExecuteAsync(UserId, "Permission");
            if (user is not null)
            {
                userActiveStatus = user.IsActive; viewModel = new ManageUserViewModel
                    {
                        Email = user.Email,
                        SelectedPermissions = userClaims,
                        IsDeleted = user.IsActive
                    };
            }
        }
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
    private async Task SaveUser()
    {
        if (viewModel != null && UserId != null)
        {
            if (viewModel.IsDeleted != userActiveStatus)
            {
                // Call DeleteUserUseCase to delete the user
                var toggleUserStatusResult = await ToggleUserStatusUseCase.ExecuteAsync(Guid.Parse(UserId));
                if (toggleUserStatusResult.IsSuccess)
                {
                    message = "User status updated successfully";
                }
                else
                {
                    message = "Failed to update user status";
                }
            }
            var updateUserClaimsResult = await UpdateUserClaimsUseCase.ExecuteAsync(UserId, "Permission", viewModel.SelectedPermissions);
            if (updateUserClaimsResult.IsSuccess)
            {
                NavigationManager.NavigateTo("/useraccount/manageusers");
            }
            else
            {
                message = "Failed to update user claims";
            }
        }
    }
    private void TogglePermission(string permission, bool isSelected)
    {
        if (isSelected)
        {
            if (!viewModel?.SelectedPermissions.Contains(permission) ?? false)
            {
                viewModel?.SelectedPermissions.Add(permission);
            }
        }
        else
        {
            viewModel?.SelectedPermissions.Remove(permission);
        }
    }


    public class ManageUserViewModel
    {
        public string? Email { get; set; }
        [Required]
        public List<string> SelectedPermissions { get; set; } = new();
        public bool IsDeleted { get; set; }
    }
}
@page "/viewemail/{emailId:guid}"
@using BulkMailSender.Application.UseCases.Email.ViewEmailScreen.Interfaces

@inject IGetEmailByIdUseCase GetEmailByIdUseCase
@inject IMapper Mapper

<div class="container-fluid p-0">
    <div class="row vh-100">
        <!-- Email Content Section -->
        <div class="col-md-10 offset-md-1 col-lg-12 offset-lg-0 col-xl-12 offset-lg-0">
            <!-- Card Wrapper -->
            <div class="card shadow-lg ">
                <header class="center-content">         
                    <h3 class="my-1">Email Details</h3>
                </header>
                <div class="card-body overflow-auto">
                    @if (emailViewModel == null)
                    {
                        <div class="text-center my-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading Email...</p>
                        </div>
                    }
                    else
                    {
                        <!-- Subject and From -->
                        <div class="mb-3">
                            <h5><strong>Subject:</strong> @emailViewModel.Subject</h5>
                            <p class="mb-1"><strong>From:</strong> @emailViewModel.EmailFrom</p>
                        </div>

                        <!-- Attachments Section -->
                        @if (emailViewModel.Attachments != null && emailViewModel.Attachments.Any())
                        {
                            <div class="mb-3">
                                <h5 class="text-secondary"><i class="bi bi-paperclip"></i> Attachments:</h5>
                                <ul class="list-group list-group-flush">
                                    @foreach (var attachment in emailViewModel.Attachments)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>@attachment.FileName</span>
                                            <a href="data:application/octet-stream;base64,@Convert.ToBase64String(attachment.Content)"
                                               download="@attachment.FileName"
                                               class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-download"></i> Download
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }

                        <!-- Email Body -->
                        <div class="mb-3">
                            <h5 class="text-secondary"><i class="bi bi-envelope"></i> Message Body:</h5>
                            <div class="border p-3 rounded" style="background-color: #f9f9f9; min-height: 150px;">
                                @((MarkupString)ProcessedEmailBody)
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public Guid EmailId { get; set; }

    private EmailViewModel emailViewModel = new();

    private string ProcessedEmailBody = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        EmailDto? email = await GetEmailByIdUseCase.ExecuteAsync(EmailId);
        if (email is not null)
        {
            emailViewModel = Mapper.Map<EmailViewModel>(email);
            ProcessedEmailBody = ReplaceCidWithInlineResources(emailViewModel.Body, emailViewModel.InlineResources);

        }
    }

    private string ReplaceCidWithInlineResources(string emailBody, List<InlineResourceViewModel> inlineResources)
    {
        if (string.IsNullOrWhiteSpace(emailBody) || inlineResources == null || !inlineResources.Any())
            return emailBody;

        // Replace cid: references in the body with inline resources
        foreach (var resource in inlineResources)
        {
            if (resource.Content != null && !string.IsNullOrWhiteSpace(resource.MimeType))
            {
                var base64Content = Convert.ToBase64String(resource.Content);
                var dataUrl = $"data:{resource.MimeType};base64,{base64Content}";

                // Replace cid reference in the body
                emailBody = emailBody.Replace($"cid:{resource.Id}", dataUrl);
            }
        }

        return emailBody;
    }
}

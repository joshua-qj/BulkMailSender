@rendermode InteractiveServer
@inject ILogoutUseCase LogoutUseCase
@inject NavigationManager NavigationManager
@* @inject IDisposable *@

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Bulk Mail Sender</a>
        <button @onclick="ToggleMenu"
        class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@collapseOrNot navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </li>

                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/testa">Test A</NavLink>
                    </li>
                }


                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/xyz">XYZ </NavLink>
                    </li>
                }
                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/custom">Custom </NavLink>
                    </li>
                }

                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="@jobSummaryUrl">Email Job Summary</NavLink>
                    </li>

                }


                @if (isAuthenticated @* && isAdmin *@)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/UserAccount/ManageUsers">Manage Users</NavLink>
                    </li>

                }
            </ul>

            <AuthorizeView>
                <Authorized>
                    <div class="navbar-nav px-3">
                        <NavLink class="nav-link" href="Account/Manage">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                        </NavLink>
                    </div>
                    <div class="navbar-nav px-3">
                        <form action="/Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="btn btn-link nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </button>
                        </form>
                    </div>

                </Authorized>
                <NotAuthorized>
                    <div class="navbar-nav px-3">
                        <NavLink class="nav-link" href="Account/Register">
                            <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                        </NavLink>
                    </div>
                    <div class="navbar-nav px-3">
                        <NavLink class="nav-link" href="Account/Login">
                            <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>


        </div>
    </div>
</nav>




@code {
    private bool isSpsPolicyAuthorized = false;
    private bool isAnoPolicyAuthorized = false;
    private bool isAuthenticated = false;
    private bool isCollapse = true;
    private bool isAdmin = false;
    private Guid userId;
    private string collapseOrNot = "collapse";
    private string? currentUrl;

    private string jobSummaryUrl;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        var authState = await authenticationStateTask;
        var user = authState.User;
        // userId= user.GetUserId();

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAuthenticated = true;
            isAdmin = user.HasClaim(c => c.Type == "Permission" && c.Value == "Admin");
            var userIdClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userIdClaim, out var parsedUserId))
            {
                userId = parsedUserId;
                jobSummaryUrl = $"/emailjobsummary/{userId}";
            }
        }
    }

    private void ToggleMenu()
    {
        isCollapse = !isCollapse;
        collapseOrNot = isCollapse ? "collapse" : string.Empty;
    }


private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
{
    currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    StateHasChanged();
}
public void Dispose()
{
    NavigationManager.LocationChanged -= OnLocationChanged;
}
}